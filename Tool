using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using DocumentFormat.OpenXml;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;

public class GenerateReportModel : PageModel
{
    private readonly string _connectionString = "YourDatabaseConnectionString";

    [BindProperty]
    public string SqlScript { get; set; }

    [BindProperty]
    public List<string> Columns { get; set; } = new List<string>();

    [BindProperty]
    public List<string> SelectedColumns { get; set; } = new List<string>();

    [BindProperty]
    public string SelectedStoredProcedure { get; set; }

    [BindProperty]
    public Dictionary<string, string> StoredProcedureParameters { get; set; } = new Dictionary<string, string>();

    [BindProperty]
    public List<string> StoredProcedures { get; set; } = new List<string>();

    [BindProperty]
    public List<ProcedureParameter> ProcedureParameters { get; set; } = new List<ProcedureParameter>();

    public IActionResult OnGet()
    {
        LoadStoredProcedures();
        return Page();
    }

    public async Task<IActionResult> OnPostExecuteScriptAsync()
    {
        DataTable dataTable = new DataTable();
        try
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand(SqlScript, connection);
                var adapter = new SqlDataAdapter(command);
                await Task.Run(() => adapter.Fill(dataTable));
            }
        }
        catch (Exception ex)
        {
            ModelState.AddModelError(string.Empty, $"Error executing SQL script: {ex.Message}");
            LoadStoredProcedures();
            return Page();
        }

        foreach (DataColumn column in dataTable.Columns)
        {
            Columns.Add(column.ColumnName);
        }

        HttpContext.Session.Set("QueryResult", dataTable);

        LoadStoredProcedures();
        return Page();
    }

    public async Task<IActionResult> OnPostExecuteStoredProcedureAsync()
    {
        DataTable dataTable = new DataTable();
        try
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                var command = new SqlCommand(SelectedStoredProcedure, connection);
                command.CommandType = CommandType.StoredProcedure;

                foreach (var param in StoredProcedureParameters)
                {
                    var parameter = new SqlParameter(param.Key, param.Value);
                    command.Parameters.Add(parameter);
                }

                var adapter = new SqlDataAdapter(command);
                await Task.Run(() => adapter.Fill(dataTable));
            }
        }
        catch (Exception ex)
        {
            ModelState.AddModelError(string.Empty, $"Error executing stored procedure: {ex.Message}");
            LoadStoredProcedures();
            return Page();
        }

        foreach (DataColumn column in dataTable.Columns)
        {
            Columns.Add(column.ColumnName);
        }

        HttpContext.Session.Set("QueryResult", dataTable);

        LoadStoredProcedures();
        return Page();
    }

    public IActionResult OnPostGenerateReport()
    {
        var dataTable = HttpContext.Session.Get<DataTable>("QueryResult");
        if (dataTable == null)
        {
            ModelState.AddModelError(string.Empty, "No query result found.");
            LoadStoredProcedures();
            return Page();
        }

        using (var stream = new MemoryStream())
        {
            using (var document = SpreadsheetDocument.Create(stream, SpreadsheetDocumentType.Workbook))
            {
                var workbookPart = document.AddWorkbookPart();
                workbookPart.Workbook = new Workbook();
                var worksheetPart = workbookPart.AddNewPart<WorksheetPart>();
                worksheetPart.Worksheet = new Worksheet(new SheetData());
                var sheets = document.WorkbookPart.Workbook.AppendChild(new Sheets());
                var sheet = new Sheet() { Id = document.WorkbookPart.GetIdOfPart(worksheetPart), SheetId = 1, Name = "Report" };
                sheets.Append(sheet);

                var sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();

                var headerRow = new Row();
                foreach (var column in SelectedColumns)
                {
                    headerRow.Append(new Cell() { CellValue = new CellValue(column), DataType = CellValues.String });
                }
                sheetData.AppendChild(headerRow);

                foreach (DataRow row in dataTable.Rows)
                {
                    var newRow = new Row();
                    foreach (var column in SelectedColumns)
                    {
                        newRow.Append(new Cell() { CellValue = new CellValue(row[column].ToString()), DataType = CellValues.String });
                    }
                    sheetData.AppendChild(newRow);
                }

                workbookPart.Workbook.Save();
            }

            stream.Position = 0;
            return File(stream, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "report.xlsx");
        }
    }

    public IActionResult OnPostGetStoredProcedureParameters()
    {
        ProcedureParameters.Clear();

        using (var connection = new SqlConnection(_connectionString))
        {
            var query = @"SELECT PARAMETER_NAME, DATA_TYPE
                          FROM INFORMATION_SCHEMA.PARAMETERS
                          WHERE SPECIFIC_NAME = @StoredProcedureName";
            var command = new SqlCommand(query, connection);
            command.Parameters.AddWithValue("@StoredProcedureName", SelectedStoredProcedure);
            connection.Open();
            using (var reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    ProcedureParameters.Add(new ProcedureParameter
                    {
                        Name = reader.GetString(0),
                        Type = reader.GetString(1)
                    });
                }
            }
        }

        LoadStoredProcedures();
        return Page();
    }

    private void LoadStoredProcedures()
    {
        using (var connection = new SqlConnection(_connectionString))
        {
            var command = new SqlCommand("SELECT name FROM sys.procedures", connection);
            connection.Open();
            using (var reader = command.ExecuteReader())
            {
                while (reader.Read())
                {
                    StoredProcedures.Add(reader.GetString(0));
                }
            }
        }
    }

    public class ProcedureParameter
    {
        public string Name { get; set; }
        public string Type { get; set; }
    }
}



@page
@model GenerateReportModel
@{
    ViewData["Title"] = "Generate Report";
}

<h1>Generate Report</h1>

<form method="post">
    <div>
        <label for="SqlScript">Enter SQL Script</label>
        <textarea id="SqlScript" name="SqlScript" asp-for="SqlScript"></textarea>
        <span asp-validation-for="SqlScript" class="text-danger"></span>
    </div>
    <button type="submit" asp-page-handler="ExecuteScript">Execute Script</button>
</form>

<h2>Or</h2>

<form method="post">
    <div>
        <label for="SelectedStoredProcedure">Select Stored Procedure</label>
        <select id="SelectedStoredProcedure" name="SelectedStoredProcedure" asp-for="SelectedStoredProcedure" asp-items="@(new SelectList(Model.StoredProcedures))" onchange="this.form.submit()">
            <option value="">--Select a Stored Procedure--</option>
        </select>
    </div>
</form>

@if (Model.ProcedureParameters.Any())
{
    <form method="post">
        <div>
            <h3>Enter Parameters</h3>
            @foreach (var param in Model.ProcedureParameters)
            {
                <div>
                    <label for="@param.Name">@param.Name (@param.Type)</label>
                    <input id="@param.Name" name="StoredProcedureParameters[@param.Name]" type="text" />
                </div>
            }
        </div>
        <button type="submit" asp-page-handler="ExecuteStoredProcedure">Execute Stored Procedure</button>
    </form>
}

@if (Model.Columns.Count > 0)
{
    <h3>Select Columns</h3>
    <form method="post">
        @foreach (var column in Model.Columns)
        {
            <div>
                <input type="checkbox" name="SelectedColumns" value="@column" /> @column
            </div>
        }
        <button type="submit" asp-page-handler="GenerateReport">Generate Report</button>
    </form>
}
