@model dynamic

<div class="container">
    <h3>Data Display with Filters</h3>

    <!-- Debugging: Output the data to verify -->
    <pre>@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model, Newtonsoft.Json.Formatting.Indented))</pre>

    <!-- Row for Search and Column Filter -->
    <div class="row mb-3">
        <div class="col-md-6">
            <!-- Search box -->
            <input type="text" id="searchBox" class="form-control" placeholder="Search...">
        </div>
        <div class="col-md-6 text-end">
            <!-- Column filter options (dropdown with checkboxes) -->
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                    Show/Hide Columns
                </button>
                <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton" id="columnFilterDropdown">
                    @if (Model.ColumnList != null && Model.ColumnList.Count > 0)
                    {
                        foreach (var column in Model.ColumnList)
                        {
                            <li>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" value="@column" id="columnFilter_@column" checked>
                                    <label class="form-check-label" for="columnFilter_@column">
                                        @column
                                    </label>
                                </div>
                            </li>
                        }
                    }
                    else
                    {
                        <li><a class="dropdown-item" href="#">No columns available</a></li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <!-- Table container -->
    <table id="dataTable" class="table table-bordered">
        <thead>
            <tr>
                @if (Model.ColumnList != null && Model.ColumnList.Count > 0)
                {
                    foreach (var column in Model.ColumnList)
                    {
                        <th class="sortable" data-column="@column">@column 
                            <span class="sort-icon"></span>
                        </th>
                    }
                }
                else
                {
                    <th>No data available</th>
                }
            </tr>
        </thead>
        <tbody id="dataBody">
            @if (Model.DataList != null && Model.DataList.Count > 0)
            {
                foreach (var row in Model.DataList)
                {
                    <tr>
                        @foreach (var column in Model.ColumnList)
                        {
                            <td data-column="@column">@row[column]</td>
                        }
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="100%">No data available</td></tr>
            }
        </tbody>
    </table>

    <!-- Pagination controls -->
    <nav>
        <ul class="pagination justify-content-center" id="pagination">
            <li class="page-item" id="prevPage">
                <a class="page-link" href="#" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </a>
            </li>
            <!-- Page numbers will be dynamically added here -->
            <li class="page-item" id="nextPage">
                <a class="page-link" href="#" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </a>
            </li>
        </ul>
    </nav>
</div>

<!-- Script section for functionality -->
<script>
    $(document).ready(function () {
        initializeTable();

        // Custom search functionality
        $('#searchBox').on('keyup', function () {
            var searchTerm = this.value.toLowerCase();
            $('#dataTable tbody tr').each(function () {
                var rowText = $(this).text().toLowerCase();
                $(this).toggle(rowText.indexOf(searchTerm) > -1);
            });
        });

        // Column show/hide functionality
        $('#columnFilterDropdown input').on('change', function () {
            var selectedColumns = $('#columnFilterDropdown input:checked').map(function () {
                return $(this).val();
            }).get();

            $('#dataTable th, #dataTable td').each(function () {
                var columnName = $(this).data('column');
                if (columnName) {
                    var shouldShow = selectedColumns.includes(columnName);
                    $(this).toggle(shouldShow);
                }
            });
        });

        function initializeTable() {
            var currentPage = 1;
            var rowsPerPage = 10;

            // Sorting functionality
            $('#dataTable th.sortable').on('click', function () {
                var column = $(this).data('column');
                var order = $(this).data('order') === 'asc' ? 'desc' : 'asc';
                $(this).data('order', order);
                sortTable(column, order);
                updateSortIcons($(this), order);
            });

            // Pagination functionality
            function paginateTable() {
                var totalRows = $('#dataTable tbody tr').length;
                var totalPages = Math.ceil(totalRows / rowsPerPage);

                $('#pagination').empty();

                if (totalPages > 1) {
                    // Previous page button
                    $('#pagination').append(`<li class="page-item" id="prevPage">
                        <a class="page-link" href="#" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>`);

                    // Page numbers
                    for (var i = 1; i <= totalPages; i++) {
                        $('#pagination').append(`<li class="page-item"><a class="page-link" href="#">${i}</a></li>`);
                    }

                    // Next page button
                    $('#pagination').append(`<li class="page-item" id="nextPage">
                        <a class="page-link" href="#" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>`);
                }

                showPage(1);

                $('#pagination').on('click', 'li', function () {
                    var page = $(this).text();
                    if ($(this).attr('id') === 'prevPage') {
                        page = Math.max(1, currentPage - 1);
                    } else if ($(this).attr('id') === 'nextPage') {
                        page = Math.min(totalPages, currentPage + 1);
                    } else {
                        page = parseInt(page);
                    }
                    currentPage = page;
                    showPage(currentPage);
                });
            }

            function showPage(page) {
                var start = (page - 1) * rowsPerPage;
                var end = start + rowsPerPage;
                $('#dataTable tbody tr').hide().slice(start, end).show();

                // Update pagination buttons state
                $('#prevPage').toggleClass('disabled', page === 1);
                $('#nextPage').toggleClass('disabled', page === Math.ceil($('#dataTable tbody tr').length / rowsPerPage));
            }

            function sortTable(column, order) {
                var rows = $('#dataTable tbody tr').get();
                rows.sort(function (a, b) {
                    var A = $(a).find('td[data-column="' + column + '"]').text().toUpperCase();
                    var B = $(b).find('td[data-column="' + column + '"]').text().toUpperCase();

                    if (A < B) {
                        return order === 'asc' ? -1 : 1;
                    }
                    if (A > B) {
                        return order === 'asc' ? 1 : -1;
                    }
                    return 0;
                });
                $.each(rows, function (index, row) {
                    $('#dataTable tbody').append(row);
                });
                showPage(currentPage);
            }

            function updateSortIcons(header, order) {
                $('#dataTable th').each(function () {
                    var icon = $(this).find('.sort-icon');
                    icon.removeClass('text-primary bi bi-caret-up text-danger bi bi-caret-down');
                    if ($(this).data('column') === header.data('column')) {
                        icon.addClass(order === 'asc' ? 'text-primary bi bi-caret-up' : 'text-danger bi bi-caret-down');
                    }
                });
            }

            // Initialize the pagination and sorting
            paginateTable();
        }
    });
</script>

<!-- Include Bootstrap Icons (for sorting icons) -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">




@page
@model YourNamespace.Pages.PrivacyModel

<!DOCTYPE html>
<html>
<head>
    <title>Privacy Page</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</head>
<body>
    <div class="container">
        <h1>Privacy Page</h1>

        <!-- Load Partial View Button -->
        <button id="loadPartialView" class="btn btn-primary mb-3">Load Data</button>

        <!-- Table container -->
        <div id="partialViewContainer">
            <!-- The partial view will be loaded here -->
        </div>
    </div>

    <script>
        $(document).ready(function () {
            $('#loadPartialView').on('click', function () {
                $("#partialViewContainer").load("/Privacy?handler=LoadPartialView", function(response, status, xhr) {
                    if (status == "error") {
                        console.log("Error loading partial view:", xhr.statusText);
                    }
                });
            });
        });
    </script>
</body>
</html>
