CREATE TABLE HtmlFiles (
    Id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FileName VARCHAR2(255) NOT NULL UNIQUE,
    FileContent CLOB NOT NULL,
    CreatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


[HttpPost("upload")]
public async Task<IActionResult> UploadHtmlFiles([FromBody] List<FileUploadDto> files)
{
    try
    {
        foreach (var file in files)
        {
            using var connection = new OracleConnection("<Your_Connection_String>");
            await connection.OpenAsync();

            var command = new OracleCommand("INSERT INTO HtmlFiles (FileName, FileContent) VALUES (:FileName, :FileContent)", connection);
            command.Parameters.Add(new OracleParameter("FileName", file.FileName));
            command.Parameters.Add(new OracleParameter("FileContent", file.FileContent));
            await command.ExecuteNonQueryAsync();
        }
        return Ok(new { Message = "Files uploaded successfully." });
    }
    catch (Exception ex)
    {
        return StatusCode(500, new { Error = ex.Message });
    }
}

public class FileUploadDto
{
    public string FileName { get; set; }
    public string FileContent { get; set; }
}

[HttpGet("get-file")]
public async Task<IActionResult> GetFileByName(string fileName)
{
    try
    {
        using var connection = new OracleConnection("<Your_Connection_String>");
        await connection.OpenAsync();

        var command = new OracleCommand("SELECT FileContent FROM HtmlFiles WHERE FileName = :FileName", connection);
        command.Parameters.Add(new OracleParameter("FileName", fileName));

        var result = await command.ExecuteScalarAsync();

        if (result == null)
            return NotFound(new { Message = "File not found." });

        return Ok(new { FileName = fileName, FileContent = result.ToString() });
    }
    catch (Exception ex)
    {
        return StatusCode(500, new { Error = ex.Message });
    }
}


<div>
  <input type="file" multiple (change)="onFileSelected($event)" />
  <button (click)="uploadFiles()">Upload</button>
</div>


import { HttpClient } from '@angular/common/http';
import { Component } from '@angular/core';

@Component({
  selector: 'app-upload',
  templateUrl: './upload.component.html',
})
export class UploadComponent {
  files: { fileName: string; fileContent: string }[] = [];

  constructor(private http: HttpClient) {}

  onFileSelected(event: any) {
    const selectedFiles = event.target.files;
    for (let file of selectedFiles) {
      const reader = new FileReader();
      reader.onload = () => {
        this.files.push({ fileName: file.name, fileContent: reader.result as string });
      };
      reader.readAsText(file);
    }
  }

  uploadFiles() {
    this.http.post('/api/upload', this.files).subscribe({
      next: () => alert('Files uploaded successfully!'),
      error: (err) => console.error('Upload error', err),
    });
  }
}



<div>
  <input type="text" [(ngModel)]="fileName" placeholder="Enter filename" />
  <button (click)="getFile()">Get File</button>
</div>
<div *ngIf="fileContent">
  <h3>{{ fileName }}</h3>
  <pre>{{ fileContent }}</pre>
</div>



import { HttpClient } from '@angular/common/http';
import { Component } from '@angular/core';

@Component({
  selector: 'app-retrieve',
  templateUrl: './retrieve.component.html',
})
export class RetrieveComponent {
  fileName: string = '';
  fileContent: string | null = null;

  constructor(private http: HttpClient) {}

  getFile() {
    this.http.get(`/api/get-file?fileName=${this.fileName}`).subscribe({
      next: (response: any) => {
        this.fileContent = response.fileContent;
      },
      error: () => alert('File not found'),
    });
  }
}

