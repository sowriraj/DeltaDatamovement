using System;
using System.Data;
using System.Data.SqlClient;

class Program
{
    static void Main(string[] args)
    {
        // Connection string to your SQL Server database
        string connectionString = "Your_Connection_String_Here";

        // Create two DataTables to represent the source and destination data
        DataTable sourceDataTable = new DataTable();
        DataTable destinationDataTable = new DataTable();

        // Fill the source and destination DataTables with data (you can load data from your source)
        // For this example, we'll manually create sample data
        sourceDataTable.Columns.Add("ID", typeof(int));
        sourceDataTable.Columns.Add("Name", typeof(string));

        sourceDataTable.Rows.Add(1, "John");
        sourceDataTable.Rows.Add(2, "Alice");
        sourceDataTable.Rows.Add(3, "Bob");

        destinationDataTable.Columns.Add("ID", typeof(int));
        destinationDataTable.Columns.Add("Name", typeof(string));

        destinationDataTable.Rows.Add(1, "John");
        destinationDataTable.Rows.Add(3, "Charlie");

        // Find rows to insert and update
        DataTable rowsToInsert = GetRowsToInsert(sourceDataTable, destinationDataTable);
        DataTable rowsToUpdate = GetRowsToUpdate(sourceDataTable, destinationDataTable);

        // Insert new rows
        foreach (DataRow row in rowsToInsert.Rows)
        {
            InsertRowIntoDatabase(connectionString, "YourTable", row);
        }

        // Update existing rows
        foreach (DataRow row in rowsToUpdate.Rows)
        {
            UpdateRowInDatabase(connectionString, "YourTable", row);
        }

        Console.WriteLine("Data comparison and operations completed.");
    }

    // Function to get rows to insert
    static DataTable GetRowsToInsert(DataTable source, DataTable destination)
    {
        DataTable rowsToInsert = new DataTable();
        rowsToInsert = source.Clone();

        foreach (DataRow sourceRow in source.Rows)
        {
            int id = (int)sourceRow["ID"];
            DataRow[] matchingRows = destination.Select("ID = " + id);

            if (matchingRows.Length == 0)
            {
                rowsToInsert.ImportRow(sourceRow);
            }
        }

        return rowsToInsert;
    }

    // Function to get rows to update
    static DataTable GetRowsToUpdate(DataTable source, DataTable destination)
    {
        DataTable rowsToUpdate = new DataTable();
        rowsToUpdate = source.Clone();

        foreach (DataRow sourceRow in source.Rows)
        {
            int id = (int)sourceRow["ID"];
            DataRow[] matchingRows = destination.Select("ID = " + id);

            if (matchingRows.Length > 0)
            {
                DataRow destinationRow = matchingRows[0];
                if (!DataRowComparer.Default.Equals(sourceRow, destinationRow))
                {
                    rowsToUpdate.ImportRow(sourceRow);
                }
            }
        }

        return rowsToUpdate;
    }

    // Function to insert a row into the database
    static void InsertRowIntoDatabase(string connectionString, string tableName, DataRow row)
    {
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();

            string insertQuery = $"INSERT INTO {tableName} (ID, Name) VALUES (@ID, @Name)";
            SqlCommand insertCommand = new SqlCommand(insertQuery, connection);

            insertCommand.Parameters.AddWithValue("@ID", row["ID"]);
            insertCommand.Parameters.AddWithValue("@Name", row["Name"]);

            insertCommand.ExecuteNonQuery();
        }
    }

    // Function to update a row in the database
    static void UpdateRowInDatabase(string connectionString, string tableName, DataRow row)
    {
        using (SqlConnection connection = new SqlConnection(connectionString))
        {
            connection.Open();

            string updateQuery = $"UPDATE {tableName} SET Name = @Name WHERE ID = @ID";
            SqlCommand updateCommand = new SqlCommand(updateQuery, connection);

            updateCommand.Parameters.AddWithValue("@ID", row["ID"]);
            updateCommand.Parameters.AddWithValue("@Name", row["Name"]);

            updateCommand.ExecuteNonQuery();
        }
    }
}
var builder = WebApplication.CreateBuilder(args);

// Check the host path and set the environment variable
if (builder.Environment.ContentRootPath.Contains("YourSpecificHostPath"))
{
    builder.Configuration.AddInMemoryCollection(new Dictionary<string, string>
    {
        { "ASPNETCORE_ENVIRONMENT", "Staging" }
    });
}

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}
else
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();
var builder = WebApplication.CreateBuilder(args);

// Get the host name
var hostName = System.Net.Dns.GetHostName();

// Check the host name and set the environment variable
if (hostName.Equals("YourSpecificHostName", StringComparison.OrdinalIgnoreCase))
{
    builder.Configuration.AddInMemoryCollection(new Dictionary<string, string>
    {
        { "ASPNETCORE_ENVIRONMENT", "Staging" }
    });
}

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}
else
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();
var builder = WebApplication.CreateBuilder(args);

// Get the host name
var hostName = System.Net.Dns.GetHostName();

// Check the host name and set the environment variable
if (hostName.Equals("YourSpecificHostName", StringComparison.OrdinalIgnoreCase))
{
    builder.Configuration.AddInMemoryCollection(new Dictionary<string, string>
    {
        { "ASPNETCORE_ENVIRONMENT", "Staging" }
    });
}

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
}
else
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();

app.UseRouting();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

app.Run();

<!-- Inside your component template -->
<mat-form-field>
  <input matInput type="number" [(ngModel)]="sortOrder" appNumbersOnly>
  <button mat-button (click)="decreaseSortOrder()">-</button>
  <button mat-button (click)="increaseSortOrder()">+</button>
</mat-form-field>


// Import necessary modules
import { Component } from '@angular/core';

// Component decorator and class definition
@Component({
  selector: 'app-your-component',
  templateUrl: './your-component.component.html',
  styleUrls: ['./your-component.component.css']
})

export class YourComponent {
  sortOrder: number = 0;

  // Method to decrease sort order
  decreaseSortOrder() {
    this.sortOrder--;
  }

  // Method to increase sort order
  increaseSortOrder() {
    this.sortOrder++;
  }
}


// Import necessary modules
import { Directive, ElementRef, HostListener } from '@angular/core';

// Directive decorator and class definition
@Directive({
  selector: '[appNumbersOnly]'
})
export class NumbersOnlyDirective {

  constructor(private el: ElementRef) { }

  // Listen to keydown event and allow only numerical inputs
  @HostListener('keydown', ['$event']) onKeyDown(event: KeyboardEvent) {
    const allowedKeys = ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab', 'End', 'Home'];
    if (allowedKeys.includes(event.key)) {
      return;
    }

    if ((event.key < '0' || event.key > '9') && event.key !== '-') {
      event.preventDefault();
    }
  }
}
