<script>
    document.getElementById('yourForm').addEventListener('submit', function (e) {
        e.preventDefault();
        var formData = new FormData(this);
        
        $.ajax({
            url: '@Url.Page("YourPage")',
            type: 'POST',
            data: formData,
            processData: false,
            contentType: false,
            success: function (response) {
                // Update the form fields with the received response
                document.getElementById('InputField').value = response.inputField; // Assuming 'inputField' is the property name in your model
                
                // You can update other form fields similarly
            }
        });
    });
</script>
public class YourPageModel : PageModel
{
    [BindProperty]
    public YourFormModel InputModel { get; set; }

    public void OnGet()
    {
        // Code to execute when the page is first loaded
    }

    public async Task<IActionResult> OnPostAsync()
    {
        // Your asynchronous logic here
        // Access form data using InputModel.InputField
        
        // Example: Simulate asynchronous work with Task.Delay
        await Task.Delay(2000); // Simulate a delay of 2 seconds

        // Return the same model as the response
        return new JsonResult(InputModel);
    }
}
import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-your-component',
  templateUrl: './your-component.component.html',
  styleUrls: ['./your-component.component.css']
})
export class YourComponent implements OnInit {
  initialData: any = {
    // Initialize with your initial data
  };
  modifiedData: any;
  isDataChanged = false;

  constructor() { }

  ngOnInit(): void {
    // Make a deep copy of initialData to modifiedData
    this.modifiedData = JSON.parse(JSON.stringify(this.initialData));
  }

  onInputChange() {
    // Check if data has been changed
    this.isDataChanged = !this.isDataEqual(this.initialData, this.modifiedData);
  }

  onSave() {
    // Save logic here
    this.initialData = JSON.parse(JSON.stringify(this.modifiedData)); // Update initialData
    this.isDataChanged = false; // Reset the flag after saving
  }

  // Function to check if two objects are equal
  isDataEqual(obj1: any, obj2: any): boolean {
    return JSON.stringify(obj1) === JSON.stringify(obj2);
  }
}
