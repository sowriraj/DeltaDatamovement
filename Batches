using System;
using System.Collections.Concurrent;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace FileSearchApp
{
    public partial class MainForm : Form
    {
        private ConcurrentBag<SearchResult> searchResults = new ConcurrentBag<SearchResult>();

        public MainForm()
        {
            InitializeComponent();
        }

        private void searchButton_Click(object sender, EventArgs e)
        {
            searchResults = new ConcurrentBag<SearchResult>(); // Clear the previous results
            dataGridView.Rows.Clear();

            string searchText = searchTextbox.Text.Trim();
            if (string.IsNullOrEmpty(searchText))
            {
                MessageBox.Show("Please enter text to search.");
                return;
            }

            // Split the search text into individual keywords
            string[] keywords = searchText.Split(',');

            FolderBrowserDialog folderBrowser = new FolderBrowserDialog();
            DialogResult result = folderBrowser.ShowDialog();

            if (result == DialogResult.OK)
            {
                string rootFolder = folderBrowser.SelectedPath;

                int batchSize = 10; // Set your desired batch size
                var files = Directory.EnumerateFiles(rootFolder, "*.*", SearchOption.AllDirectories);
                var fileBatches = files.Batch(batchSize);

                Parallel.ForEach(fileBatches, fileBatch =>
                {
                    SearchTextInFiles(fileBatch, keywords);
                });

                // Display results in DataGridView
                foreach (SearchResult resultItem in searchResults)
                {
                    dataGridView.Rows.Add(resultItem.FileName, resultItem.LineNumber, resultItem.SearchKey, resultItem.LineContents);
                }

                // Export the result to CSV
                ExportToCSV("SearchResults.csv");

                MessageBox.Show("Search completed. Results exported to SearchResults.csv.");
            }
        }

        private void SearchTextInFiles(IEnumerable<string> files, string[] keywords)
        {
            foreach (string filePath in files)
            {
                SearchFile(filePath, keywords);
            }
        }

        private void SearchFile(string filePath, string[] keywords)
        {
            try
            {
                using (StreamReader reader = new StreamReader(filePath))
                {
                    int lineNumber = 0;

                    while (!reader.EndOfStream)
                    {
                        lineNumber++;
                        string line = reader.ReadLine();

                        // Check if all keywords are present in the line
                        if (keywords.All(keyword => line.Contains(keyword)))
                        {
                            SearchResult result = new SearchResult
                            {
                                FileName = Path.GetFileName(filePath),
                                LineNumber = lineNumber,
                                SearchKey = string.Join(",", keywords),
                                LineContents = line
                            };

                            searchResults.Add(result);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error reading file {filePath}: {ex.Message}");
            }
        }

        private void ExportToCSV(string outputPath)
        {
            try
            {
                File.WriteAllLines(outputPath, searchResults.Select(result =>
                    $"\"{result.FileName}\",\"{result.LineNumber}\",\"{result.SearchKey}\",\"{result.LineContents}\""));
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error exporting to CSV: {ex.Message}");
            }
        }
    }

    public class SearchResult
    {
        public string FileName { get; set; }
        public int LineNumber { get; set; }
        public string SearchKey { get; set; }
        public string LineContents { get; set; }
    }
}
public static class Extensions
{
    public static IEnumerable<IEnumerable<T>> Batch<T>(this IEnumerable<T> source, int size)
    {
        using (var enumerator = source.GetEnumerator())
        {
            while (enumerator.MoveNext())
            {
                yield return YieldBatchElements(enumerator, size - 1);
            }
        }
    }

    private static IEnumerable<T> YieldBatchElements<T>(IEnumerator<T> source, int size)
    {
        yield return source.Current;

        for (int i = 0; i < size && source.MoveNext(); i++)
        {
            yield return source.Current;
        }
    }
}
private void SearchFile(string filePath, string[] keywords)
{
    try
    {
        int lineNumber = 0;

        using (StreamReader reader = new StreamReader(filePath))
        {
            while (!reader.EndOfStream)
            {
                lineNumber++;
                string line;

                // Use a lock to ensure exclusive access to the StreamReader
                lock (reader)
                {
                    // Read one line at a time
                    line = reader.ReadLine();
                }

                // Check if all keywords are present in the line
                if (keywords.All(keyword => line.Contains(keyword)))
                {
                    SearchResult result = new SearchResult
                    {
                        FileName = Path.GetFileName(filePath),
                        LineNumber = lineNumber,
                        SearchKey = string.Join(",", keywords),
                        LineContents = line
                    };

                    searchResults.Add(result);
                }
            }
        }
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error reading file {filePath}: {ex.Message}");
    }
}
private readonly object fileLock = new object();

private void SearchFile(string filePath, string[] keywords)
{
    try
    {
        int lineNumber = 0;

        using (StreamReader reader = new StreamReader(filePath))
        {
            while (!reader.EndOfStream)
            {
                lineNumber++;
                string line;

                // Use a lock to ensure exclusive access to the StreamReader
                lock (fileLock)
                {
                    // Read one line at a time
                    line = reader.ReadLine();
                }

                // Check if all keywords are present in the line
                if (keywords.All(keyword => line.Contains(keyword)))
                {
                    SearchResult result = new SearchResult
                    {
                        FileName = Path.GetFileName(filePath),
                        LineNumber = lineNumber,
                        SearchKey = string.Join(",", keywords),
                        LineContents = line
                    };

                    searchResults.Add(result);
                }
            }
        }
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error reading file {filePath}: {ex.Message}");
    }
}
private void SearchFile(string filePath, string[] keywords)
{
    try
    {
        int lineNumber = 0;

        string[] lines;
        
        // Read all lines at once
        lock (fileLock)
        {
            lines = File.ReadAllLines(filePath);
        }

        foreach (string line in lines)
        {
            lineNumber++;

            // Check if all keywords are present in the line
            if (keywords.All(keyword => line.Contains(keyword)))
            {
                SearchResult result = new SearchResult
                {
                    FileName = Path.GetFileName(filePath),
                    LineNumber = lineNumber,
                    SearchKey = string.Join(",", keywords),
                    LineContents = line
                };

                searchResults.Add(result);
            }
        }
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error reading file {filePath}: {ex.Message}");
    }
}
private void SearchFile(string filePath, string[] keywords)
{
    try
    {
        int lineNumber = 0;

        using (var fileStream = File.OpenText(filePath))
        {
            string line;
            while ((line = fileStream.ReadLine()) != null)
            {
                lineNumber++;

                // Check if all keywords are present in the line
                if (keywords.All(keyword => line.Contains(keyword)))
                {
                    SearchResult result = new SearchResult
                    {
                        FileName = Path.GetFileName(filePath),
                        LineNumber = lineNumber,
                        SearchKey = string.Join(",", keywords),
                        LineContents = line
                    };

                    searchResults.Add(result);
                }
            }
        }
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error reading file {filePath}: {ex.Message}");
    }
}
private void SearchFile(string filePath, string[] keywords)
{
    try
    {
        int lineNumber = 0;

        string[] lines;

        // Read all lines at once
        lock (fileLock)
        {
            lines = File.ReadAllLines(filePath);
        }

        Parallel.ForEach(lines, (line, _, index) =>
        {
            int currentLineNumber = (int)index + 1; // Line numbers start from 1

            // Check if all keywords are present in the line
            if (keywords.All(keyword => line.Contains(keyword)))
            {
                SearchResult result = new SearchResult
                {
                    FileName = Path.GetFileName(filePath),
                    LineNumber = currentLineNumber,
                    SearchKey = string.Join(",", keywords),
                    LineContents = line
                };

                searchResults.Add(result);
            }
        });
    }
    catch (Exception ex)
    {
        MessageBox.Show($"Error reading file {filePath}: {ex.Message}");
    }
}apiVersion: apps/v1
kind: DeploymentConfig
metadata:
  name: angular-app-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: angular-app
    spec:
      containers:
        - name: angular-app
          image: angular-app:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              ng build --prod --base-href=/subfolder/ && cp -r /tmp/artifacts/* /var/www/html
          env:
            - name: BASE_HREF
              value: "/subfolder/"
apiVersion: apps/v1
kind: DeploymentConfig
metadata:
  name: angular-app-deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: angular-app
    spec:
      containers:
        - name: angular-app
          image: angular-app:latest
          command:
            - ng
            - build
            - --prod
            - --base-href=/subfolder/
          args:
            - "&&"
            - cp
            - -r
            - /tmp/artifacts/*
            - /var/www/html
          env:
            - name: BASE_HREF
              value: "/subfolder/"

// config.service.ts
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class ConfigService {
  private configSubject = new BehaviorSubject<any>(null);
  config$ = this.configSubject.asObservable();

  private config: any;

  constructor(private http: HttpClient) {}

  loadConfig(): void {
    if (!this.config) {
      this.http.get('assets/config.json').subscribe(
        (data) => {
          this.config = data;
          this.configSubject.next(this.config);
        },
        (error) => {
          console.error('Error loading config file:', error);
          throw error;
        }
      );
    }
  }

  getConfig(): any {
    return this.config;
  }

  isInitialized(): boolean {
    return !!this.config;
  }
}
import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

const { pathname } = window.location;
const baseHref = pathname.startsWith('/subfolder/') ? '/subfolder/' : '/';

platformBrowserDynamic([{ provide: 'APP_BASE_HREF', useValue: baseHref }])
  .bootstrapModule(AppModule)
  .catch((err) => console.error(err));
import { enableProdMode } from '@angular/core';
import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
import { AppModule } from './app/app.module';
import { environment } from './environments/environment';

if (environment.production) {
  enableProdMode();
}

const { pathname } = window.location;
const subfolder = '/subfolder'; // Adjust the subfolder as needed
const baseHref = `${subfolder}/#`;

document.querySelector('base').setAttribute('href', baseHref);

platformBrowserDynamic().bootstrapModule(AppModule)
  .catch(err => console.error(err));
<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteBase /

    # If the request is not a file or directory, rewrite it to the Angular subfolder
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule ^angularapp/(.*)$ /angularapp/$1 [L]
</IfModule>
<VirtualHost *:80>
    ServerAdmin webmaster@yourdomain.com
    DocumentRoot /var/www/html

    <Directory "/var/www/html">
        AllowOverride All
        # Other configuration directives for the main directory
    </Directory>

    ProxyPass /angularapp http://localhost:4200/angularapp
    ProxyPassReverse /angularapp http://localhost:4200/angularapp

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

class Program
{
    static async Task Main()
    {
        // Replace the URL with the actual endpoint you want to post to
        string apiUrl = "https://example.com/api/resource";

        // Replace jsonString with your actual JSON data
        string jsonString = "{\"key1\":\"value1\",\"key2\":\"value2\"}";

        // Create an instance of HttpClient
        using (HttpClient httpClient = new HttpClient())
        {
            // Create StringContent from the JSON string
            StringContent content = new StringContent(jsonString, Encoding.UTF8, "application/json");

            try
            {
                // Make the POST request
                HttpResponseMessage response = await httpClient.PostAsync(apiUrl, content);

                // Check if the request was successful (status code 2xx)
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("POST request successful");
                }
                else
                {
                    Console.WriteLine($"POST request failed with status code {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }
    }
}
<IfModule mod_rewrite.c>
  RewriteEngine On
  RewriteBase /subfolder/   # Adjust this according to your subfolder
  RewriteRule ^index\.html$ - [L]
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteRule . /subfolder/index.html [L]   # Adjust this according to your subfolder
</IfModule>

<VirtualHost *:80>
    ServerAdmin webmaster@example.com
    DocumentRoot /var/www/html

    # Redirect from root to the subfolder
    RedirectMatch ^/$ /myapp/

    <Directory "/var/www/html">
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>

    <Directory "/var/www/html/myapp">
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted

        # Disable trailing slash redirect
        DirectorySlash Off
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
<VirtualHost *:80>
    ServerAdmin webmaster@example.com
    DocumentRoot /var/www/html

    # Redirect from root to the subfolder
    RedirectMatch ^/$ /myapp/

    <Directory "/var/www/html">
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>

    <Directory "/var/www/html/myapp">
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted

        # Disable trailing slash redirect
        RewriteEngine On
        RewriteRule ^(.+)/$ $1 [R=301,L]
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

<IfModule mod_rewrite.c>
    RewriteEngine On

    # Remove trailing slash for subfolders
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule ^(.+)/$ /$1 [L,R=301]
</IfModule>
# custom_rewrite.conf

<IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteRule ^/old-url$ /new-url [L,R=301]
    # Add more rewrite rules as needed
</IfModule>
# custom_rewrite.conf

<IfModule mod_rewrite.c>
    RewriteEngine On

    # Remove trailing slash at the end of subfolder URLs
    RewriteRule ^/subfolder/(.*)/$ /subfolder/$1 [L,R=301]

    # Add more rewrite rules as needed

</IfModule>
# custom_rewrite.conf

<IfModule mod_rewrite.c>
    RewriteEngine On

    # Remove trailing slash at the end of subfolder URLs
    RewriteRule ^/subfolder/(.*)/$ /subfolder/$1 [L,R=301]

    # Rewrite requests to the Angular app
    RewriteCond %{REQUEST_URI} !^/subfolder/
    RewriteRule ^/(.*)$ /subfolder/$1 [L]
</IfModule>

<VirtualHost *:80>
    ServerName your-domain.com
    DocumentRoot /var/www/html/your-site

    <Directory "/var/www/html/your-site">
        AllowOverride All
        Require all granted
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined

    # Rewrite logic
    RewriteEngine On

    # Example: Redirect HTTP to HTTPS
    RewriteCond %{HTTPS} off
    RewriteRule ^ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

    # Example: Remove trailing slashes
    RewriteRule ^(.+)/$ $1 [L,R=301]

    # Add more rewrite rules as needed

</VirtualHost>
<VirtualHost *:80>
    ServerName your-domain.com
    DocumentRoot /var/www/html

    <Directory "/var/www/html">
        Options FollowSymLinks
        AllowOverride None
        Require all granted
    </Directory>

    # Alias to point /subfolder to the actual directory
    Alias /subfolder /var/www/html/subfolder

    <Directory "/var/www/html/subfolder">
        Options Indexes FollowSymLinks
        AllowOverride None
        Require all granted
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>
<VirtualHost *:80>
    ServerName your-domain.com
    DocumentRoot /var/www/html

    <Directory "/var/www/html">
        Options FollowSymLinks
        AllowOverride None
        Require all granted
    </Directory>

    # Alias to point /subfolder to the actual directory
    Alias /subfolder /var/www/html/subfolder

    <Directory "/var/www/html/subfolder">
        Options Indexes FollowSymLinks
        AllowOverride None
        Require all granted

        # Rewrite to handle Angular routes without trailing slashes
        RewriteEngine On
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteRule ^(.*)$ /subfolder/index.html#$1 [L,QSA]
    </Directory>

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined
</VirtualHost>

<VirtualHost *:80>
    ServerName example.com
    DocumentRoot /var/www/mainapp

    <Directory "/var/www/mainapp">
        Options FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>

    Alias "/subfolder" "/var/www/mainapp/subfolder"

    <Directory "/var/www/mainapp/subfolder">
        Options FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>

    <Location "/subfolder">
        RewriteEngine On

        # Add a trailing slash if it's missing
        RewriteCond %{REQUEST_URI} !/$
        RewriteRule ^(.*)$ %{REQUEST_URI}/ [L,R=301]

        # Other rewrite rules or configurations specific to the subfolder

        ProxyPass http://localhost:3000/    # Replace with your actual backend URL
        ProxyPassReverse http://localhost:3000/    # Replace with your actual backend URL
    </Location>
</VirtualHost>

<!-- _PopupPartial.cshtml -->
<div>
    <h2>@Model.Title</h2>
    <p>@Model.Content</p>
</div>

// ExampleViewModel.cs
public class ExampleViewModel
{
    public string Title { get; set; }
    public string Content { get; set; }
}
// HomeController.cs
public class HomeController : Controller
{
    public ActionResult Index()
    {
        return View();
    }

    public PartialViewResult ShowPopup()
    {
        var model = new ExampleViewModel
        {
            Title = "Popup Title",
            Content = "This is the content of the popup."
        };

        return PartialView("_PopupPartial", model);
    }
}

