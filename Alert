@page
@model YourNamespace.Pages.YourPageModel
@{
    ViewData["Title"] = "Your Page Title";
}

<!-- Your page content -->

<!-- Alert container -->
<div id="alertContainer" class="alert alert-danger alert-dismissible fade show" role="alert" style="position: fixed; top: 10px; right: 10px; display: none;">
    <span id="alertMessage"></span>
    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
</div>

<!-- Your scripts -->
@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        function showAlert(message) {
            $('#alertMessage').text(message);
            $('#alertContainer').show();

            // Auto-clear after 5 seconds
            setTimeout(function() {
                $('#alertContainer').fadeOut('slow');
            }, 5000);
        }

        function makeAjaxCall() {
            $.ajax({
                url: '/YourRazorPage/YourEndpoint',
                type: 'POST',
                data: { /* your data */ },
                success: function(response) {
                    // Handle success
                },
                error: function(xhr, status, error) {
                    showAlert('An error occurred: ' + error);
                }
            });
        }

        // Call this function as needed
        // makeAjaxCall();
    </script>
}

To remove the padding from a Bootstrap alert and make the close icon smaller, you can use custom CSS. Here's an example:

1. **Remove Alert Padding:**
   Add a class to your alert and then use CSS to remove the padding.

2. **Make Close Icon Smaller:**
   Use CSS to adjust the size of the close icon.

Here's an example of how you can do this:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Custom Bootstrap Alert</title>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .custom-alert {
            padding: 0 !important; /* Remove padding */
        }
        .custom-alert .close {
            font-size: 0.75rem; /* Make close icon smaller */
            line-height: 1.5; /* Adjust line height */
            padding: 0.25rem 0.5rem; /* Optional: Adjust padding around the close icon */
        }
    </style>
</head>
<body>
    <div class="alert alert-warning alert-dismissible fade show custom-alert" role="alert">
        This is a warning alert with no padding and a smaller close icon.
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
   If you prefer to handle the dismissal of the alert manually with a click event, you can use JavaScript to remove the alert from the DOM. Here's how you can do it:

1. **Set up your HTML structure without relying on Bootstrap's built-in dismissible alert functionality.**
2. **Attach a click event to the button to remove the alert manually.**

Here’s an example:

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dismissible Alert with JavaScript</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .custom-alert {
      padding: 0 !important;
    }
    .custom-alert .btn-close {
      font-size: 1rem;
      padding: 0.2rem 0.5rem;
    }
  </style>
</head>
<body>

  <div id="customAlert" class="alert alert-warning custom-alert" role="alert">
    This is a custom alert with modified padding and a styled close button.
    <button type="button" class="btn btn-warning btn-close" id="closeAlertButton">
      Close
    </button>
  </div>

  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script>
    document.getElementById('closeAlertButton').addEventListener('click', function() {
      var alert = document.getElementById('customAlert');
      alert.classList.remove('show');
      alert.classList.add('fade');
      setTimeout(function() {
        alert.remove();
      }, 150); // Match the Bootstrap fade transition duration
    });
  </script>
</body>
</html>
```

**Explanation:**

1. **HTML Structure**:
    - The alert `div` has an `id="customAlert"` for easy access in JavaScript.
    - The button has an `id="closeAlertButton"` for attaching the click event.

2. **CSS Styles**:
    - Custom styles to modify padding and button size as needed.

3. **JavaScript**:
    - Attach a click event listener to the close button.
    - When the button is clicked, remove the alert smoothly by adding a fade-out effect and then removing the alert from the DOM.
    - The `setTimeout` is used to match the Bootstrap fade transition duration, ensuring a smooth effect before removing the element.

This method provides a manual way to handle the alert dismissal, giving you more control over the process.


To achieve sending an error message if the AJAX request fails, and sending a partial page if the request is successful, you can modify the AJAX request handling in your frontend JavaScript. Here's how you can implement this:

### Razor Page (Backend)

Ensure your Razor Page handler (`OnPost` method in `YourPage.cshtml.cs`) returns a `PartialViewResult` or an error message as needed. Here's a basic example:

```csharp
// YourPage.cshtml.cs

public class YourPageModel : PageModel
{
    public IActionResult OnPost()
    {
        try
        {
            // Your logic to handle the POST request
            // For example, fetching data or processing something

            // Assuming your PartialView is named "_PartialView.cshtml"
            return Partial("_PartialView", model); // Replace "model" with your actual model object
        }
        catch (Exception ex)
        {
            // Handle exception and return an error message
            return BadRequest(new { message = "An error occurred: " + ex.Message });
        }
    }
}
```

### HTML and JavaScript (Frontend)

Update your frontend to handle both success and error scenarios:

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AJAX to Razor Page with Error Handling</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>

  <div id="partialViewContainer"></div>
  <div id="alertContainer"></div>

  <button id="sendRequestButton" class="btn btn-primary">Send Request</button>

  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script>
    $(document).ready(function () {
      $('#sendRequestButton').on('click', function () {
        $.ajax({
          type: 'POST',
          url: '/YourPage', // Replace with your actual Razor Page URL
          success: function (partialHtml) {
            $('#partialViewContainer').html(partialHtml);
            $('#alertContainer').html(''); // Clear any previous alert
          },
          error: function (xhr, status, error) {
            var errorMessage = xhr.responseJSON ? xhr.responseJSON.message : 'An error occurred: ' + error;
            showAlert('danger', errorMessage);
            $('#partialViewContainer').html(''); // Clear partial view container on error
          }
        });
      });

      function showAlert(type, message) {
        var alertHtml = '<div class="alert alert-' + type + ' alert-dismissible fade show" role="alert">'
                      + message
                      + '<button type="button" class="close" data-dismiss="alert" aria-label="Close">'
                      + '<span aria-hidden="true">&times;</span>'
                      + '</button>'
                      + '</div>';
        $('#alertContainer').html(alertHtml);
      }
    });
  </script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.1/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
```

### Explanation

1. **Razor Page Backend**:
   - The `OnPost` method tries to execute the logic and returns a `PartialView` on success or a `BadRequest` with an error message on failure.

2. **Frontend JavaScript**:
   - The `success` function handles the received `partialHtml` and injects it into `#partialViewContainer`.
   - The `error` function handles any errors that occur during the AJAX request. It displays an error message using the `showAlert` function and clears the `#partialViewContainer` to ensure no stale data is displayed.

3. **Error Handling**:
   - The `error` function checks if `xhr.responseJSON` exists (indicating a custom error message from the server) or falls back to a generic error message.

4. **Alert Display**:
   - The `showAlert` function dynamically creates an alert with Bootstrap classes (`alert`, `alert-dismissible`, `alert-{type}`) and inserts it into `#alertContainer`.

This setup ensures that your application can handle both successful and failed AJAX requests to a Razor Page, displaying appropriate messages or partial views based on the server's response. Adjust the URLs and logic as per your specific application .


To show a loading symbol during all AJAX calls and hide it once the request completes, you can use jQuery's `ajaxStart` and `ajaxStop` events. These events allow you to show a loading indicator when an AJAX request starts and hide it when all AJAX requests have completed.

Here’s how to set this up:

1. **Include a loading indicator in your HTML**.
2. **Use jQuery to handle the `ajaxStart` and `ajaxStop` events**.

### HTML

Add a loading indicator to your HTML. This can be a simple spinner or any other indicator of your choice:

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AJAX with Loading Indicator</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <style>
    .custom-alert {
      padding: 0.5rem 1rem;
      max-width: 600px;
      word-wrap: break-word;
    }
    #loadingIndicator {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 9999;
    }
  </style>
</head>
<body>

  <div id="partialViewContainer"></div>
  <div id="alertContainer"></div>
  <div id="loadingIndicator">
    <div class="spinner-border text-primary" role="status">
      <span class="sr-only">Loading...</span>
    </div>
  </div>

  <button id="sendRequestButton" class="btn btn-primary">Send Request</button>

  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script>
    $(document).ready(function () {
      $(document).ajaxStart(function () {
        $('#loadingIndicator').show();
      }).ajaxStop(function () {
        $('#loadingIndicator').hide();
      });

      $('#sendRequestButton').on('click', function () {
        $.ajax({
          type: 'POST',
          url: '/YourPage', // Replace with your actual Razor Page URL
          success: function (partialHtml) {
            $('#partialViewContainer').html(partialHtml);
            $('#alertContainer').html(''); // Clear any previous alert
          },
          error: function (xhr, status, error) {
            var errorMessage = xhr.responseJSON ? xhr.responseJSON.message : 'An error occurred: ' + error;
            showAlert('danger', errorMessage);
            $('#partialViewContainer').html(''); // Clear partial view container on error
          }
        });
      });

      function showAlert(type, message) {
        var alertHtml = '<div class="alert alert-' + type + ' alert-dismissible fade show custom-alert" role="alert">'
                      + message
                      + '<button type="button" class="close" data-dismiss="alert" aria-label="Close">'
                      + '<span aria-hidden="true">&times;</span>'
                      + '</button>'
                      + '</div>';
        $('#alertContainer').html(alertHtml);
      }
    });
  </script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.1/umd/popper.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>
```

### Explanation

1. **Loading Indicator**:
   - The loading indicator is a Bootstrap spinner placed inside a `div` with `id="loadingIndicator"`. Initially, it is hidden using `display: none;`.

2. **jQuery AJAX Events**:
   - The `$(document).ajaxStart` event handler shows the loading indicator when an AJAX request starts.
   - The `$(document).ajaxStop` event handler hides the loading indicator when all AJAX requests have completed.

3. **AJAX Request**:
   - The `$('#sendRequestButton').on('click', function () { ... })` function triggers the AJAX request to your Razor Page URL (`/YourPage`).
   - The `success` function updates the `#partialViewContainer` with the received `partialHtml`.
   - The `error` function displays an error message using the `showAlert` function and clears the `#partialViewContainer`.

By using this approach, you ensure that a loading indicator is displayed during AJAX requests, improving the user experience by providing visual feedback that the application is processing a request. Adjust the positioning and styling of the loading indicator as needed to fit your design requirements.

Yes, there's a simpler way to implement a searchable dropdown using just HTML and jQuery. We can use a single `input` element for the search functionality and dynamically show/hide `option` elements from a `select` element based on the search query. Here’s how you can do it:

### HTML Structure

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Simple Searchable Dropdown</title>
  <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
  <style>
    .searchable-select {
      position: relative;
    }
    .searchable-select input {
      width: 100%;
      box-sizing: border-box;
    }
    .searchable-select select {
      position: absolute;
      top: 100%;
      left: 0;
      width: 100%;
      display: none;
      z-index: 1000;
      background: white;
      border: 1px solid #ccc;
    }
    .searchable-select select option {
      padding: 0.5rem;
      cursor: pointer;
    }
  </style>
</head>
<body>

  <div class="container mt-4">
    <div class="searchable-select">
      <input type="text" id="searchableInput" placeholder="Select an option" class="form-control">
      <select id="searchableSelect" size="5">
        <option value="1">Option 1</option>
        <option value="2">Option 2</option>
        <option value="3">Option 3</option>
        <option value="4">Option 4</option>
        <!-- Add more options as needed -->
      </select>
    </div>
  </div>

  <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
  <script>
    $(document).ready(function() {
      var $searchableInput = $('#searchableInput');
      var $searchableSelect = $('#searchableSelect');

      // Show the select dropdown when the input field is focused
      $searchableInput.on('focus', function() {
        $searchableSelect.show();
      });

      // Hide the select dropdown when clicking outside
      $(document).on('click', function(event) {
        if (!$(event.target).closest('.searchable-select').length) {
          $searchableSelect.hide();
        }
      });

      // Filter options based on input value
      $searchableInput.on('input', function() {
        var query = $(this).val().toLowerCase();
        $searchableSelect.children('option').each(function() {
          var optionText = $(this).text().toLowerCase();
          if (optionText.includes(query)) {
            $(this).show();
          } else {
            $(this).hide();
          }
        });
      });

      // Handle option selection
      $searchableSelect.on('change', function() {
        var selectedText = $(this).find('option:selected').text();
        $searchableInput.val(selectedText);
        $searchableSelect.hide();
      });
    });
  </script>

</body>
</html>
```

### Explanation

1. **HTML Structure**:
   - A `div` with the class `searchable-select` contains an input field (`#searchableInput`) and a select element (`#searchableSelect`).
   - The select element has a size attribute set to 5, which allows multiple options to be visible at once.

2. **CSS**:
   - The select element is styled to be positioned absolutely under the input field and initially hidden.
   - Additional styling ensures the dropdown appears correctly and options are clickable.

3. **JavaScript/jQuery**:
   - The input field (`#searchableInput`) shows the select dropdown when focused.
   - Clicking outside the `searchable-select` container hides the select dropdown.
   - The input event on the input field filters the select options based on the user’s input.
   - The change event on the select element updates the input field with the selected option's text and hides the select dropdown.

This approach uses basic HTML and jQuery to create a simple searchable dropdown without any external libraries, providing a straightforward and effective solution.
