@page
@model IndexModel

@{
    ViewData["Title"] = "Bootstrap Table with Search, Sort, Pagination, and Column Visibility";
}

<div class="container mt-5">
    <h2>@ViewData["Title"]</h2>

    <div class="row mb-3">
        <div class="col-sm-4">
            <input type="text" class="form-control" placeholder="Search..." id="searchInput" />
        </div>
        <div class="col-sm-8 text-end">
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="columnDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    Show/Hide Columns
                </button>
                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="columnDropdown">
                    <li>
                        <input type="checkbox" class="form-check-input" id="showName" checked />
                        <label class="form-check-label" for="showName">Name</label>
                    </li>
                    <li>
                        <input type="checkbox" class="form-check-input" id="showAge" checked />
                        <label class="form-check-label" for="showAge">Age</label>
                    </li>
                    <li>
                        <input type="checkbox" class="form-check-input" id="showEmail" checked />
                        <label class="form-check-label" for="showEmail">Email</label>
                    </li>
                </ul>
            </div>
        </div>
    </div>

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th scope="col" class="name-col"><a href="#" class="sort" data-sort="name">Name</a></th>
                <th scope="col" class="age-col"><a href="#" class="sort" data-sort="age">Age</a></th>
                <th scope="col" class="email-col"><a href="#" class="sort" data-sort="email">Email</a></th>
            </tr>
        </thead>
        <tbody id="tableBody">
            @foreach (var item in Model.PaginatedList)
            {
                <tr>
                    <td class="name-col">@item.Name</td>
                    <td class="age-col">@item.Age</td>
                    <td class="email-col">@item.Email</td>
                </tr>
            }
        </tbody>
    </table>

    <nav>
        <ul class="pagination justify-content-center">
            <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                <a class="page-link" href="?page=@(Model.CurrentPage - 1)">Previous</a>
            </li>
            @for (int i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                    <a class="page-link" href="?page=@i">@i</a>
                </li>
            }
            <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                <a class="page-link" href="?page=@(Model.CurrentPage + 1)">Next</a>
            </li>
        </ul>
    </nav>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const searchInput = document.getElementById('searchInput');
            const tableBody = document.getElementById('tableBody');
            const rows = tableBody.getElementsByTagName('tr');

            // Search functionality
            searchInput.addEventListener('input', function () {
                const filter = searchInput.value.toLowerCase();

                for (let i = 0; i < rows.length; i++) {
                    const cells = rows[i].getElementsByTagName('td');
                    let match = false;

                    for (let j = 0; j < cells.length; j++) {
                        if (cells[j].textContent.toLowerCase().includes(filter)) {
                            match = true;
                            break;
                        }
                    }

                    rows[i].style.display = match ? '' : 'none';
                }
            });

            // Column show/hide functionality
            const checkboxes = document.querySelectorAll('.form-check-input');
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function () {
                    const columnClass = checkbox.id.replace('show', '').toLowerCase() + '-col';
                    const columns = document.querySelectorAll(`.${columnClass}`);
                    
                    columns.forEach(col => {
                        col.style.display = checkbox.checked ? '' : 'none';
                    });
                });
            });
        });
    </script>
}


using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using System.Collections.Generic;
using System.Linq;

public class IndexModel : PageModel
{
    public List<Person> PaginatedList { get; set; } = new List<Person>();
    public int CurrentPage { get; set; }
    public int TotalPages { get; set; }

    public void OnGet(int page = 1)
    {
        int pageSize = 10;
        List<Person> allData = GetData();
        int totalCount = allData.Count;

        CurrentPage = page;
        TotalPages = (int)System.Math.Ceiling(totalCount / (double)pageSize);

        PaginatedList = allData
            .Skip((page - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private List<Person> GetData()
    {
        // This is a sample dataset, replace it with your actual data
        return new List<Person>
        {
            new Person { Name = "John Doe", Age = 28, Email = "john@example.com" },
            new Person { Name = "Jane Smith", Age = 34, Email = "jane@example.com" },
            new Person { Name = "Alice Johnson", Age = 29, Email = "alice@example.com" },
            // Add more data...
        };
    }

    public class Person
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public string Email { get; set; }
    }
}
