using System;
using System.Collections.Generic;
using System.Reflection;
using Oracle.ManagedDataAccess.Client;

public static class OracleDataReaderExtensions
{
    public static IEnumerable<T> MapToClass<T>(this OracleDataReader reader, Func<OracleDataReader, T> mapFunction)
    {
        while (reader.Read())
        {
            yield return mapFunction(reader);
        }
    }

    public static T ReadAllProperties<T>(this OracleDataReader reader) where T : new()
    {
        T obj = new T();

        var properties = typeof(T).GetProperties();
        foreach (var property in properties)
        {
            try
            {
                if (property.CanWrite)
                {
                    var value = reader[property.Name];
                    if (value != DBNull.Value)
                    {
                        property.SetValue(obj, value);
                    }
                }
            }
            catch (Exception ex)
            {
                // Handle property mapping exceptions
                Console.WriteLine($"Error mapping property '{property.Name}': {ex.Message}");
            }
        }

        return obj;
    }
}

using System;
using System.Collections.Generic;
using Oracle.ManagedDataAccess.Client;

// Example class to map to the result set
public class MyClass
{
    public int Id { get; set; }
    public string Name { get; set; }
    // Add other properties as needed
}

// Example usage
public class Program
{
    public static void Main()
    {
        using (OracleConnection connection = new OracleConnection(connectionString))
        {
            connection.Open();
            using (OracleCommand command = connection.CreateCommand())
            {
                command.CommandText = "Your_StoredProcedure_Name";
                command.CommandType = CommandType.StoredProcedure;

                // Add parameters as needed
                command.Parameters.Add("refCursor1", OracleDbType.RefCursor).Direction = ParameterDirection.Output;

                // Execute the command and retrieve the OracleRefCursor
                command.ExecuteNonQuery();
                var refCursor = (OracleRefCursor)command.Parameters["refCursor1"].Value;

                // Get the OracleDataReader from the OracleRefCursor
                using (OracleDataReader reader = refCursor.GetDataReader())
                {
                    var results = reader.MapToClass(r => r.ReadAllProperties<MyClass>());

                    // Do something with the results
                    foreach (var item in results)
                    {
                        Console.WriteLine($"Id: {item.Id}, Name: {item.Name}");
                    }
                }
            }
        }
    }
}

