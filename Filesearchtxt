using System;
using System.Collections.Concurrent;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace FileSearchApp
{
    public partial class MainForm : Form
    {
        private ConcurrentBag<SearchResult> searchResults = new ConcurrentBag<SearchResult>();

        public MainForm()
        {
            InitializeComponent();
        }

        private void searchButton_Click(object sender, EventArgs e)
        {
            searchResults.Clear();
            dataGridView.Rows.Clear();

            string searchText = searchTextbox.Text.Trim();
            if (string.IsNullOrEmpty(searchText))
            {
                MessageBox.Show("Please enter text to search.");
                return;
            }

            // Split the search text into individual keywords
            string[] keywords = searchText.Split(',');

            FolderBrowserDialog folderBrowser = new FolderBrowserDialog();
            DialogResult result = folderBrowser.ShowDialog();

            if (result == DialogResult.OK)
            {
                string rootFolder = folderBrowser.SelectedPath;

                SearchTextInFiles(rootFolder, keywords);

                // Display results in DataGridView
                foreach (SearchResult resultItem in searchResults)
                {
                    dataGridView.Rows.Add(resultItem.FileName, resultItem.LineNumber, resultItem.SearchKey, resultItem.LineContents);
                }

                // Export the result to CSV
                ExportToCSV("SearchResults.csv");

                MessageBox.Show("Search completed. Results exported to SearchResults.csv.");
            }
        }

        private void SearchTextInFiles(string folderPath, string[] keywords)
        {
            try
            {
                Parallel.ForEach(Directory.EnumerateFiles(folderPath, "*.*", SearchOption.AllDirectories), filePath =>
                {
                    SearchFile(filePath, keywords);
                });
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error accessing folder {folderPath}: {ex.Message}");
            }
        }

        private void SearchFile(string filePath, string[] keywords)
        {
            try
            {
                using (StreamReader reader = new StreamReader(filePath))
                {
                    int lineNumber = 0;

                    while (!reader.EndOfStream)
                    {
                        lineNumber++;
                        string line = reader.ReadLine();

                        // Check if all keywords are present in the line
                        if (keywords.All(keyword => line.Contains(keyword)))
                        {
                            SearchResult result = new SearchResult
                            {
                                FileName = Path.GetFileName(filePath),
                                LineNumber = lineNumber,
                                SearchKey = string.Join(",", keywords),
                                LineContents = line
                            };

                            searchResults.Add(result);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error reading file {filePath}: {ex.Message}");
            }
        }

        private void ExportToCSV(string outputPath)
        {
            try
            {
                File.WriteAllLines(outputPath, searchResults.Select(result =>
                    $"\"{result.FileName}\",\"{result.LineNumber}\",\"{result.SearchKey}\",\"{result.LineContents}\""));
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error exporting to CSV: {ex.Message}");
            }
        }
    }

    public class SearchResult
    {
        public string FileName { get; set; }
        public int LineNumber { get; set; }
        public string SearchKey { get; set; }
        public string LineContents { get; set; }
    }
}
ChatGPT 3.5

User
Can you write year end appraisal self review comments for developer

ChatGPT
Certainly! Here are some example year-end appraisal self-review comments for a developer:

Achievements:

Successfully delivered [X] projects ahead of schedule, showcasing strong project management and organizational skills.
Implemented innovative solutions, such as [specific technology/tool], resulting in improved system performance and user experience.
Technical Skills:

Demonstrated proficiency in [programming languages/technologies] through consistently clean and efficient code.
Kept up-to-date with industry trends and adopted new technologies, enhancing the team's technical capabilities.
Collaboration:

Actively collaborated with team members on [number] cross-functional projects, contributing valuable insights and fostering a positive team environment.
Effectively communicated complex technical concepts to non-technical stakeholders, facilitating better understanding and alignment.
Problem Solving:

Demonstrated strong analytical and problem-solving skills by resolving [X] critical issues promptly.
Proactively identified and addressed potential challenges, preventing potential roadblocks in project development.
Initiative:

Took the initiative to lead [specific initiative/project], showcasing leadership qualities and a proactive approach.
Contributed to process improvements, streamlining development workflows and enhancing overall team efficiency.
Learning and Development:

Engaged in continuous learning by completing [X] relevant courses or certifications, enhancing professional development.
Actively sought and applied feedback, showing a commitment to personal and professional growth.
Adaptability:

Successfully adapted to changes in project requirements and technologies, demonstrating flexibility and a willingness to learn new skills.
Played a key role in the successful implementation of [X] change or update, showcasing adaptability and resilience.
Quality of Work:

Consistently delivered high-quality code, leading to a reduction in post-release issues and increased client satisfaction.
Implemented and maintained robust testing processes, ensuring the reliability and stability of developed systems.
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-ingress
  annotations:
    haproxy.org/rewrite-target: /
    haproxy.org/ssl-certificate: "my-tls-secret"
    haproxy.org/ssl-redirect: "true"
    haproxy.org/ssl-passthrough: "false"
spec:
  rules:
  - host: your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-service
            port:
              number: 80

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-ingress
  annotations:
    ingress.appscode.com/protocol: "https"
    ingress.appscode.com/type: "haproxy"
    ingress.appscode.com/ssl-accelerator: "haproxy"
    ingress.appscode.com/ssl-redirect: "true"
    ingress.appscode.com/secure-backends: "true"
    ingress.appscode.com/ssl-passthrough: "false"
    ingress.appscode.com/ssl-certificate: "my-tls-secret"
spec:
  rules:
  - host: your-domain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: my-service
            port:
              number: 80
  tls:
  - hosts:
    - your-domain.com
    secretName: my-tls-secret
    port: 8443


