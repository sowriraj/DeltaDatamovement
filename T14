@page
@model YourNamespace.Pages.IndexModel
@{
    ViewData["Title"] = "Dynamic Table";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .hidden-column { display: none; }
        th.sortable:hover { cursor: pointer; }
        th.sorted-asc::after { content: "▲"; }
        th.sorted-desc::after { content: "▼"; }
    </style>
</head>
<body>
<div class="container mt-5">
    <h2>@ViewData["Title"]</h2>

    <div class="row mb-3">
        <div class="col-sm-4">
            <input type="text" class="form-control" placeholder="Search..." id="searchInput">
        </div>
        <div class="col-sm-8 text-end">
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="columnToggleDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                    Show/Hide Columns
                </button>
                <ul class="dropdown-menu" aria-labelledby="columnToggleDropdown">
                    @foreach (var column in Model.Columns)
                    {
                        <li><label class="dropdown-item">
                            <input type="checkbox" checked class="toggle-column" data-column="@column"> @column
                        </label></li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                @foreach (var column in Model.Columns)
                {
                    <th class="sortable" data-column="@column">@column</th>
                }
            </tr>
        </thead>
        <tbody id="tableBody">
            @foreach (var item in Model.Items)
            {
                <tr>
                    @foreach (var column in Model.Columns)
                    {
                        <td>@item[column]</td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <!-- Pagination Controls -->
    <nav aria-label="Page navigation">
        <ul class="pagination" id="pagination">
            <!-- Pagination links will be generated here -->
        </ul>
    </nav>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const rowsPerPage = 10;
            const tableBody = document.getElementById('tableBody');
            const pagination = document.getElementById('pagination');
            const searchInput = document.getElementById('searchInput');
            const headers = document.querySelectorAll('th.sortable');
            let currentPage = 1;
            let sortColumn = null;
            let sortOrder = 'asc'; // 'asc' or 'desc'

            function renderTable() {
                const rows = Array.from(tableBody.getElementsByTagName('tr'));
                const filteredRows = rows.filter(row => {
                    const cells = row.getElementsByTagName('td');
                    for (let i = 0; i < cells.length; i++) {
                        if (cells[i].textContent.toLowerCase().includes(searchInput.value.toLowerCase())) {
                            return true;
                        }
                    }
                    return false;
                });

                if (sortColumn) {
                    filteredRows.sort((rowA, rowB) => {
                        const cellA = rowA.querySelector(`td:nth-child(${sortColumn})`).textContent;
                        const cellB = rowB.querySelector(`td:nth-child(${sortColumn})`).textContent;
                        const valueA = isNaN(cellA) ? cellA.toLowerCase() : parseFloat(cellA);
                        const valueB = isNaN(cellB) ? cellB.toLowerCase() : parseFloat(cellB);

                        return sortOrder === 'asc' ? (valueA > valueB ? 1 : -1) : (valueA < valueB ? 1 : -1);
                    });
                }

                const totalPages = Math.ceil(filteredRows.length / rowsPerPage);
                const startIndex = (currentPage - 1) * rowsPerPage;
                const endIndex = startIndex + rowsPerPage;
                const paginatedRows = filteredRows.slice(startIndex, endIndex);

                // Clear table body and render paginated rows
                tableBody.innerHTML = '';
                paginatedRows.forEach(row => tableBody.appendChild(row));

                // Render pagination
                pagination.innerHTML = '';
                for (let i = 1; i <= totalPages; i++) {
                    const li = document.createElement('li');
                    li.className = 'page-item';
                    if (i === currentPage) li.classList.add('active');
                    li.innerHTML = `<a class="page-link" href="#">${i}</a>`;
                    li.addEventListener('click', () => {
                        currentPage = i;
                        renderTable();
                    });
                    pagination.appendChild(li);
                }

                // Add Next and Previous buttons
                if (currentPage > 1) {
                    const prev = document.createElement('li');
                    prev.className = 'page-item';
                    prev.innerHTML = `<a class="page-link" href="#">Previous</a>`;
                    prev.addEventListener('click', () => {
                        currentPage--;
                        renderTable();
                    });
                    pagination.prepend(prev);
                }

                if (currentPage < totalPages) {
                    const next = document.createElement('li');
                    next.className = 'page-item';
                    next.innerHTML = `<a class="page-link" href="#">Next</a>`;
                    next.addEventListener('click', () => {
                        currentPage++;
                        renderTable();
                    });
                    pagination.appendChild(next);
                }
            }

            searchInput.addEventListener('input', renderTable);

            // Column visibility toggle
            document.querySelectorAll('.toggle-column').forEach(checkbox => {
                checkbox.addEventListener('change', function () {
                    const columnName = checkbox.getAttribute('data-column');
                    const headers = document.querySelectorAll('th');
                    let columnIndex = -1;

                    headers.forEach((header, index) => {
                        if (header.textContent.trim() === columnName) {
                            columnIndex = index + 1;
                        }
                    });

                    if (columnIndex > 0) {
                        const cells = document.querySelectorAll(`td:nth-child(${columnIndex}), th:nth-child(${columnIndex})`);

                        cells.forEach(cell => {
                            cell.style.display = checkbox.checked ? '' : 'none';
                        });
                    }
                });
            });

            // Sort columns
            headers.forEach((header, index) => {
                header.addEventListener('click', () => {
                    const columnIndex = index + 1;
                    const columnName = header.textContent.trim();

                    if (sortColumn === columnIndex) {
                        sortOrder = sortOrder === 'asc' ? 'desc' : 'asc';
                    } else {
                        sortColumn = columnIndex;
                        sortOrder = 'asc';
                    }

                    headers.forEach(th => th.classList.remove('sorted-asc', 'sorted-desc'));
                    header.classList.add(sortOrder === 'asc' ? 'sorted-asc' : 'sorted-desc');

                    renderTable();
                });
            });

            // Initial render
            renderTable();
        });
    </script>
}

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
