To create a searchable dropdown with options populated from a Razor Page model, you can follow these steps. This involves passing the data from the server to the client and dynamically rendering the dropdown options based on the data.

### Step 1: Razor Page Model

First, define a model with the data for the dropdown options.

#### Example Model (`DropdownOption.cs`)

```csharp
public class DropdownOption
{
    public int Value { get; set; }
    public string Text { get; set; }
}
```

### Step 2: Razor Page (`Index.cshtml.cs`)

In your Razor Page, load the dropdown options from your data source and pass them to the view.

```csharp
using Microsoft.AspNetCore.Mvc.RazorPages;
using System.Collections.Generic;

public class IndexModel : PageModel
{
    public List<DropdownOption> DropdownOptions { get; set; }

    public void OnGet()
    {
        // Populate the dropdown options (you can fetch this data from a database or any other source)
        DropdownOptions = new List<DropdownOption>
        {
            new DropdownOption { Value = 1, Text = "Option 1" },
            new DropdownOption { Value = 2, Text = "Option 2" },
            new DropdownOption { Value = 3, Text = "Option 3" },
            new DropdownOption { Value = 4, Text = "Option 4" },
            // Add more options as needed
        };
    }
}
```

### Step 3: Razor Page View (`Index.cshtml`)

In your Razor Page view, render the input field and dropdown options, and add the necessary JavaScript/jQuery to implement the searchable dropdown.

```html
@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Searchable Dropdown</title>
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        .searchable-dropdown {
            position: relative;
            width: 100%;
        }
        .searchable-dropdown input {
            width: 100%;
            box-sizing: border-box;
        }
        .dropdown-list {
            position: absolute;
            width: 100%;
            max-height: 200px;
            overflow-y: auto;
            background: white;
            border: 1px solid #ccc;
            z-index: 1000;
            display: none;
        }
        .dropdown-item {
            padding: 0.5rem;
            cursor: pointer;
        }
        .dropdown-item:hover {
            background-color: #e9ecef;
        }
    </style>
</head>
<body>

<div class="container mt-4">
    <div class="searchable-dropdown">
        <input type="text" id="searchableInput" placeholder="Search options..." class="form-control">
        <div id="dropdownList" class="dropdown-list">
            @foreach (var option in Model.DropdownOptions)
            {
                <div class="dropdown-item" data-value="@option.Value">@option.Text</div>
            }
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    $(document).ready(function() {
        var $searchableInput = $('#searchableInput');
        var $dropdownList = $('#dropdownList');
        var $dropdownItems = $dropdownList.children('.dropdown-item');

        // Show the dropdown list when the input field is focused
        $searchableInput.on('focus', function() {
            $dropdownList.show();
        });

        // Hide the dropdown list when clicking outside
        $(document).on('click', function(event) {
            if (!$(event.target).closest('.searchable-dropdown').length) {
                $dropdownList.hide();
            }
        });

        // Filter the dropdown items based on input
        $searchableInput.on('input', function() {
            var query = $(this).val().toLowerCase();
            $dropdownItems.each(function() {
                var itemText = $(this).text().toLowerCase();
                if (itemText.includes(query)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        });

        // Handle item selection
        $dropdownItems.on('click', function() {
            var selectedText = $(this).text();
            $searchableInput.val(selectedText);
            $dropdownList.hide();
        });
    });
</script>

</body>
</html>
```

### Explanation

1. **Model (`DropdownOption.cs`)**:
   - Defines a class to represent each dropdown option with `Value` and `Text` properties.

2. **Razor Page Model (`Index.cshtml.cs`)**:
   - The `IndexModel` class loads the dropdown options into the `DropdownOptions` property.
   - The `OnGet` method initializes the list with sample options.

3. **Razor Page View (`Index.cshtml`)**:
   - Uses the `searchable-dropdown` class to create a container with an input field and a `dropdown-list` div.
   - Uses a `foreach` loop to iterate through `Model.DropdownOptions` and generate `dropdown-item` divs for each option.
   - Includes jQuery code to handle the search functionality, showing/hiding options based on the input value, and updating the input field when an option is selected.

This solution leverages Razor Pages to populate the dropdown options dynamically from the server and uses jQuery to implement a searchable dropdown without external libraries.
